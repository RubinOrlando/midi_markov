#!/usr/bin/env ruby

require 'midilib'
require 'find'
require 'optparse'
require 'pry'

OPTIONS = {}
OptionParser.new do |opts|
  opts.banner = 'Usage: midi_markov [options]'

  opts.on('-i', '--input-path [FILE]', String, 'Path of MIDI file or directory to recursively search for MIDI files for training the Markov model') do |f|
    OPTIONS[:input_path] = f
  end

  opts.on('-o', '--output-path [OUTPUT_PATH]', String, 'Path to output generated MIDI file') do |output_path|
    OPTIONS[:output_path] = output_path
  end

  opts.on('-l', '--length [LENGTH]', Integer, 'Length of the generated piece in MIDI event groups (single notes or chords)') do |l|
    OPTIONS[:length] = l
  end

  opts.on('--match-length [MATCH_LENGTH]', Integer, 'Minimum length of sequences to match from input MIDI at each Markov step') do |m|
    OPTIONS[:match_length] = m
  end

  opts.on('--match-delta', 'Require generated notes to make delta_times as well as note values at each Markov step') do
    OPTIONS[:match_delta] = true
  end

  # opts.on('--allow-inversions', 'For chords, only enforce equality on note qualities, ignoring octaves') do
  #   OPTIONS[:allow_inversions] = true
  # end

  opts.on('--originality [ORIGINALITY]', Float, 'A higher value (close to 1) will select Markov chain values that lead to more possible choices (to avoid long unique sequences in the original piece)') do |o|
    OPTIONS[:originality] = o
  end

  opts.on('--rand-seed [RAND_SEED]', Integer, 'Specify the seed used in the randomization of the generated pieces (to reproduce the exact same midi)') do |r|
    OPTIONS[:rand_seed] = r
  end

  opts.on('--group-deltas', 'Force all simultaneous notes to ge grouped together (uses the delta from the first note in the chord as the chord duration)') do
    OPTIONS[:group_deltas] = true
  end

  opts.on('--on-delta [ON_DELTA]', Integer, 'This value will be used for the delta_time value of each \'on\' note.  If not provided, values will be derived from source notes.') do |d|
    OPTIONS[:on_delta] = d
  end

  opts.on('--off-delta [OFF_DELTA]', Integer, 'This value will be used for the delta_time value of each \'off\' note.  If not provided, values will be derived from source notes.') do |d|
    OPTIONS[:off_delta] = d
  end

  opts.on('--drone', 'Introduce a little bug that makes things drone-y') do
    OPTIONS[:drone] = true
  end
end.parse!

OPTIONS[:input_path] ||= './midi_files'
OPTIONS[:length] ||= 8 * 32
OPTIONS[:match_length] ||= 2
OPTIONS[:rand_seed] ||= rand(10_000)
OPTIONS[:output_path] ||= 'markov.mid'
OPTIONS[:output_path] = OPTIONS[:output_path] + '.mid' unless OPTIONS[:output_path].end_with?('.mid')

puts "Using rand-seed value of #{OPTIONS[:rand_seed]}"

# allow deterministic sampling
class Array
  R = OPTIONS[:rand_seed] ? Random.new(OPTIONS[:rand_seed]) : Random.new

  def sample
    self[R.rand(length)]
  end

  def sample_toward(length_ratio)
    target_index = [0, (length_ratio * length).round, length - 1].sort[1] # clip to array length
    index = 3.times.collect { |i| R.rand(length) }.min_by { |i| (target_index - i).abs }
    self[index]
  end
end

# Group simultaneous notes together to use as a key in a markov map
class MidiEventGroup
  attr_accessor :midi_events, :notes, :delta_times

  def initialize(midi_events=[])
    @midi_events = midi_events
    @notes = midi_events.collect(&:note).sort
    @delta_times = midi_events.collect(&:off).collect(&:delta_time).sort
  end

  def eql?(other_event_group)
    self.class == other_event_group.class &&
    self.notes == other_event_group.notes &&
    (!OPTIONS[:match_delta] || self.delta_times == other_event_group.delta_times)
  end

  def hash
    OPTIONS[:match_delta] ? (@notes + @delta_times).hash : @notes.hash
  end

  def <<(midi_event)
    @midi_events << midi_event

    @notes << midi_event.note
    @notes.sort!

    @delta_times << midi_event.off.delta_time
    @delta_times.sort!
  end

  def to_s
    @notes.to_s
  end
end


def add_sequence_to_markov_map(sequence, markov_map)
  events_starting_at = {}
  sequence.each do |track|
    track.each do |event|
      if MIDI::NoteOnEvent === event
        start_time = event.time_from_start
        events_starting_at[start_time] ||= MidiEventGroup.new
        events_starting_at[start_time] << event
      end
    end
  end

  ordered_events = events_starting_at.values

  ordered_events.each_cons(OPTIONS[:match_length] + 1).each_with_index do |events, i|
    key = events[0..-2]
    markov_map[key] ||= []
    markov_map[key] << events[-1]
  end
end

def on_and_off_events(midi_events)
  on_events = midi_events.collect do |midi_event|
    MIDI::NoteOnEvent.new(
      OPTIONS[:drone] ? midi_event.delta_time : 0, # intentional bug (should be midi channel)
      midi_event.note,
      midi_event.velocity,
      OPTIONS[:on_delta] || midi_event.delta_time
    )
  end

  off_events = midi_events.collect do |midi_event|
    MIDI::NoteOffEvent.new(
      OPTIONS[:drone] ? midi_event.off.delta_time : 0, # intentional bug (should be midi channel)
      midi_event.note,
      midi_event.off.velocity,
      OPTIONS[:off_delta] || midi_event.off.delta_time
    )
  end

  # if we want all notes in a group (chord) to start and end at the same time, only the first in the group should have a delta
  if OPTIONS[:group_deltas]
    [on_events, off_events].each do |events|
      events[1..-1].each { |event| event.delta_time = 0 }
    end
  end

  on_events + off_events
end

def generate_markov_map(midi_files)
  markov_map = {}
  midi_files.each do |midi_file|
    sequence = MIDI::Sequence.new
    File.open(midi_file, 'rb') { |f| sequence.read(f) }
    add_sequence_to_markov_map(sequence, markov_map)
  end
  # puts markov_map.values.collect(&:size).max
  markov_map
end

def select_event_groups_from_candidates(markov_map, candidates)
  if OPTIONS[:originality]
    candidates.select{ |c| markov_map[c] }.sort_by { |c| markov_map[c].size }.sample_toward(OPTIONS[:originality])
  else
    candidates.sample
  end
end

def generate_sequence(markov_map, num_steps)
  sequence = MIDI::Sequence.new
  track = MIDI::Track.new(sequence)

  # seed
  event_groups = select_event_groups_from_candidates(markov_map, markov_map.keys)
  
  num_steps.times do
    track.events += on_and_off_events(event_groups.first.midi_events)
    # rolling window of 'match_length' EventGroups as key
    candidates = markov_map[event_groups].collect { |c| event_groups[1..-1] << c }
    # puts candidates.size
    event_groups = select_event_groups_from_candidates(markov_map, candidates)
  end
  
  sequence.tracks << track
  sequence
end


#===================================================================================

input_midi_files = if File.directory?(OPTIONS[:input_path])
  Find.find(OPTIONS[:input_path]).select { |f| File.directory?(f) ? nil : f }.compact
else
  [OPTIONS[:input_path]]
end

markov_map = generate_markov_map(input_midi_files)
sequence = generate_sequence(markov_map, OPTIONS[:length])
File.open(OPTIONS[:output_path], 'wb') { | file | sequence.write(file) }
`timidity #{OPTIONS[:output_path]} 2> /dev/null`
